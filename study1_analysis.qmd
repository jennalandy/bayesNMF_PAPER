# Analysis for Simulation Study 1

```{r}
library(tidyverse)
library(glue)
library(bayesNMF)
library(ggh4x)
library(cowplot)
library(grid)
library(gridExtra)
library(png)

source("study1_analysis.R")

elementwise_mean <- function(matrix_list) {
  return(Reduce(`+`, matrix_list)/length(matrix_list))
}

data_dir = "data/study1"
results_dir = "output/study1"
output_dir = "output/study1_analysis"
figures_dir = "figures/study1"
```

## Extract metrics from each test

```{r}
get_metrics <- function(res, data) {
  res$posterior_samples$Mhat <- list()
  for (i in 1:length(res$posterior_samples$P)) {
    res$posterior_samples$Mhat[[i]] <- res$posterior_samples$P[[i]] %*% res$posterior_samples$E[[i]]
  }
  Mhat <- elementwise_mean(res$posterior_samples$Mhat)

  Phat = res$MAP$P
  Ehat = res$MAP$P

  # rescale for reconstruction metrics
  Ehat <- sweep(
    res$MAP$E,
    1,
    colSums(Phat),
    '*'
  )
  Phat <- sweep(
    Phat,
    2,
    colSums(Phat),
    '/'
  )

  # align signatures and reorder Phat, Ehat
  P_similarity_matrix <- pairwise_sim(data$P, Phat, which = "cols")
  P_hung <- hungarian_algorithm(
    P_similarity_matrix, which = "max"
  )
  P_aligned_similarity_matrix <- P_hung$mat
  Phat <- Phat[,P_hung$pairs$X2]

  E_similarity_matrix <- pairwise_sim(data$E, Ehat, which = "rows")
  E_aligned_similarity_matrix <- E_similarity_matrix[,P_hung$pairs$X2]
  Ehat <- Ehat[P_hung$pairs$X2,]

  list(
    RMSE = sqrt(mean((data$M - Mhat)**2)),
    RMSE_P = sqrt(mean((data$P - Phat)**2)),
    RMSE_E = sqrt(mean((data$E - Ehat)**2)),
    KL = KL_div(data$M, Mhat), 
    P_mean_sim = mean(diag(P_aligned_similarity_matrix)),
    P_median_sim = median(diag(P_aligned_similarity_matrix)),
    P_max_sim = max(diag(P_aligned_similarity_matrix)),
    P_min_sim = min(diag(P_aligned_similarity_matrix)),
    E_mean_sim = mean(diag(E_aligned_similarity_matrix)),
    E_median_sim = median(diag(E_aligned_similarity_matrix)),
    E_max_sim = max(diag(E_aligned_similarity_matrix)),
    E_min_sim = min(diag(E_aligned_similarity_matrix)),
    iters = res$converged_at,
    total_seconds = res$time$total_secs,
    secs_per_iter = res$time$avg_secs_per_iter
  )
}
```

```{r}
files = list.files(results_dir)
files = files[endsWith(files, ".rds")]
results = do.call(rbind, lapply(files, function(file) {
  file_updated = str_replace(file, ".rds_","_")
  file_parts = str_split(file_updated, '_')[[1]]
  N = str_replace(file_parts[1], 'N', '') %>% as.numeric
  G = str_replace(file_parts[2], 'G', '') %>% as.numeric
  rep = str_replace(file_parts[3], 'rep', '') %>% as.numeric
  model = file_parts[4]

  res <- NULL
  tryCatch({
    res <- readRDS(file.path(results_dir, file))
  }, error = function(e) {})
  if (is.null(res)) {
    print(paste(file, "not done"))
    return()
  } else if (is.null(res$converged_at)) {
    print(paste(file, "not done"))
    return()
  } else {
    print(file)
  }

  data <- readRDS(file.path(data_dir, glue("N{N}_G{G}_rep{rep}.rds")))
  metrics <- get_metrics(res, data)

  metrics$file = file
  metrics$N = N
  metrics$G = G
  metrics$rep = rep
  metrics$model = model
  
  return(metrics)
}))

results = results %>%
  data.frame() %>%
  mutate(
    RMSE = as.numeric(RMSE),
    RMSE_P = as.numeric(RMSE_P),
    RMSE_E = as.numeric(RMSE_E),
    KL = as.numeric(KL),
    P_mean_sim = as.numeric(P_mean_sim),
    P_median_sim = as.numeric(P_median_sim),
    P_max_sim = as.numeric(P_max_sim),
    P_min_sim = as.numeric(P_min_sim),
    E_mean_sim = as.numeric(E_mean_sim),
    E_median_sim = as.numeric(E_median_sim),
    E_max_sim = as.numeric(E_max_sim),
    E_min_sim = as.numeric(E_min_sim),
    iters = as.numeric(iters),
    total_seconds = as.numeric(total_seconds),
    secs_per_iter = as.numeric(secs_per_iter),
    N = as.numeric(N),
    G = as.numeric(G),
    rep = as.numeric(rep),
    file = as.character(file),
    model = factor(as.character(model), levels = c('NT','PT','PG'))
  ) 

write.csv(results, file.path(output_dir, "results_newMhat.csv"))
```

Check that all tests finished running (should have 10 for each model/N/G combo)
```{r}
counts = results %>%
  data.frame() %>%
  mutate(
    N = as.numeric(N),
    G = as.numeric(G),
    rep = as.numeric(rep),
    file = as.character(file),
    model = factor(as.character(model), levels = c('NT','PT','PG'))
  ) %>%
  group_by(N, G, model) %>%
  tally()

counts %>%
  arrange(n) %>%
  print()
```

## Build Figure 1

```{r}
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

names = c(
  'NT' = "Normal - Truncated Normal",
  "PT" = "Poisson - Truncated Normal (fast)",
  "PG" = "Poisson - Gamma"
)

colors <- c(
  'NT' = cbPalette[3],
  'PT' = cbPalette[7],
  'PG' = cbPalette[8]
)

colors_names = c()
for (col in names(colors)) {
  colors_names[names[col]] = colors[col]
}
```

```{r}
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend <- function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}
```

```{r}
text_size = 20
title_size = 30

plot_dat = results %>%
  filter(G > 4*N) %>%
  mutate(
    G = factor(
      paste(G, "samples"), 
      levels = paste(rev(sort(unique(G))), "samples")
    ),
    N = factor(
      paste(N, "signatures"),
      levels = paste(rev(sort(unique(N))), "signatures")
    ),
    model = case_when(
      model == "NT" ~ names["NT"],
      model == "PT" ~ names["PT"],
      model == "PG" ~ names["PG"]
    ),
    model = factor(as.character(model), levels = c(names['NT'],names['PT'],names['PG']))
  )

minutes = plot_dat %>%
  mutate(
    total_minutes = total_seconds/60
  ) %>%
  ggplot(aes(y = total_minutes, color = model, fill = model)) +
  facet_grid2(rows = vars(N), cols = vars(G), switch = 'both', render_empty = FALSE) +
  geom_boxplot(alpha = 0.2) +
  scale_color_manual(values = colors_names) +
  scale_fill_manual(values = colors_names) +
  labs(
    y = "Run Time (Minutes)",
    color = "Model",
    fill = "Model"
  ) +
  theme(
    legend.position = 'bottom',
    legend.direction = 'vertical',
    legend.justification = 'left'
  )
legend = minutes %>%
  g_legend()
grid.draw(legend)
ggsave(file.path(figures_dir, "legend.png"), legend, width = 5, height = 2)

minutes = minutes +
  theme(
    legend.position = c(0.4, 0.92),
    legend.title = element_text(size = title_size),
    legend.text = element_text(size = text_size),
    text = element_text(size = text_size),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.y = element_text(size = title_size)
  )
ggsave(file.path(figures_dir, "minutes.png"))

P_min_sim = plot_dat %>%
  ggplot(aes(y = P_min_sim, color = model, fill = model)) +
  facet_grid2(rows = vars(N), cols = vars(G), switch = 'both', render_empty = FALSE) +
  geom_boxplot(alpha = 0.2) +
  scale_color_manual(values = colors_names) +
  scale_fill_manual(values = colors_names) +
  labs(
    y = "Minimum Cosine Similarity",
    color = "Model",
    fill = "Model"
  ) +
  theme(
    legend.position = 'none',
    text = element_text(size = text_size),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.y = element_text(size = title_size)
  )
ggsave(file.path(figures_dir, "P_min_sim.png"))

RMSE = plot_dat %>%
  ggplot(aes(y = RMSE, color = model, fill = model)) +
  facet_grid2(rows = vars(N), cols = vars(G), switch = 'both', render_empty = FALSE, scales = 'free') +
  geom_boxplot(alpha = 0.2) +
  scale_color_manual(values = colors_names) +
  scale_fill_manual(values = colors_names) +
  labs(
    y = "RMSE",
    color = "Model",
    fill = "Model"
  ) +
  theme(
    legend.position = 'none',
    text = element_text(size = text_size),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.y = element_text(size = title_size)
  )
ggsave(file.path(figures_dir, "RMSE.png"))

KL = plot_dat %>%
  ggplot(aes(y = KL, color = model, fill = model)) +
  facet_grid2(rows = vars(N), cols = vars(G), switch = 'both', render_empty = FALSE, scales = 'free') +
  geom_boxplot(alpha = 0.2) +
  scale_color_manual(values = colors_names) +
  scale_fill_manual(values = colors_names) +
  labs(
    y = "KL-Divergence",
    color = "Model",
    fill = "Model"
  ) +
  theme(
    legend.position = 'none',
    text = element_text(size = text_size),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.y = element_text(size = title_size)
  )
ggsave(file.path(figures_dir, "KL.png"))
```

Signature plot
```{r}
res <- readRDS(file.path(results_dir, "N4_G64_rep1_NT.rds"))

plot = bayesNMF::plot_sig(res, sig = 3) +
  theme(
    text = element_text(size = text_size/2),
    title = element_text(size = text_size/2)
  )
title = ggplot_build(plot)$plot$labels$title
title = str_replace(title, '\n', '')
plot = plot + labs(
  title = gsub("\n", " | ", title)
)

ggsave(file = file.path(figures_dir, "sig.png"), height = 3)
```

Load into rasterGrob objects 
```{r}
png_sim = readPNG(file.path(figures_dir, "P_min_sim.png"))
fig_sim = rasterGrob(png_sim, interpolate = TRUE)

png_RMSE = readPNG(file.path(figures_dir, "RMSE.png"))
fig_RMSE = rasterGrob(png_RMSE, interpolate = TRUE)

png_KL = readPNG(file.path(figures_dir, "KL.png"))
fig_KL = rasterGrob(png_KL, interpolate = TRUE)

png_minutes = readPNG(file.path(figures_dir, "minutes.png"))
fig_minutes = rasterGrob(png_minutes, interpolate = TRUE)

png_legend = readPNG(file.path(figures_dir, "legend.png"))
fig_legend = rasterGrob(png_legend, interpolate = TRUE)

png_sig = readPNG(file.path(figures_dir, "sig.png"))
fig_sig = rasterGrob(png_sig, interpolate = TRUE)
```

Combine with gridExtra
```{r}
add_label_top_left <- function(grob, label, label_size = 200, label_margin = unit(0, "lines")) {
  gridExtra::arrangeGrob(
    grob,
    top = textGrob(
      label,
      x = unit(0, "npc") + label_margin,   # Align to left with margin
      y = unit(1, "npc") - label_margin,   # Add top margin
      just = c("left", "top"),             # Align to top-left corner
      gp = gpar(fontsize = label_size, fontface = "bold")  # Set label style
    )
  )
}

legend <- arrangeGrob(
  grid::textGrob(""),
  fig_legend,
  ncol = 2, widths = c(3, 3)
)

center <- arrangeGrob(
  add_label_top_left(fig_sim, "A"),
  grid::textGrob(""),
  add_label_top_left(fig_minutes, "B"),

  grid::textGrob(""),
  grid::textGrob(""),
  grid::textGrob(""),

  add_label_top_left(fig_RMSE, "C"),
  grid::textGrob(""),
  add_label_top_left(fig_KL, "D"),

  ncol = 3,
  heights = c(15, space, 15),
  widths = c(15, space, 15)
)

space = 0.5
plot <- grid.arrange(
  grobs = list(
    # legend,
    center,
    grid::textGrob(""),
    add_label_top_left(fig_sig, 'E')
  ),
  ncol = 1,
  heights = c(30, space, 10),
  widths = c(30)
)

png(file.path(figures_dir, "figure1.png"), width = 30*300, height = (30 + 10)*300)
grid.draw(plot)
dev.off()
```

## Build Supplementary Figure

```{r}
results %>%
  select(N, G, rep, secs_per_iter, model) %>%
  filter(model %in% c('NT','PT')) %>%
  pivot_wider(names_from = model, values_from = secs_per_iter) %>%
  ggplot(aes(x = NT, y = PT)) +
  geom_abline(linetype = 2) +
  geom_point() +
  labs(
    x = "Normal-Truncated Normal",
    y = "Poisson-Truncated Normal",
    title = "Average Seconds Per Iteration"  
  )
ggsave(file.path(figures_dir, "sec_per_iter.png"))
```

```{r}
results %>%
  select(N, G, rep, iters, model) %>%
  filter(model %in% c('NT','PT')) %>%
  pivot_wider(names_from = model, values_from = iters) %>%
  ggplot(aes(x = NT, y = PT)) +
  geom_abline(linetype = 2) +
  geom_jitter() +
  labs(
    x = "Normal-Truncated Normal",
    y = "Poisson-Truncated Normal",
    title = "Iterations to Convergence"  
  )
ggsave(file.path(figures_dir, "iters.png"))
```


```{r}
png_secs = readPNG("figures/study2/sec_per_iter.png")
fig_secs = rasterGrob(png_secs, interpolate = TRUE)

png_iters = readPNG("figures/study2/iters.png")
fig_iters = rasterGrob(png_iters, interpolate = TRUE)

add_label_top_left <- function(grob, label, label_size = 200, label_margin = unit(0, "lines")) {
  gridExtra::arrangeGrob(
    grob,
    top = textGrob(
      label,
      x = unit(0, "npc") + label_margin,   # Align to left with margin
      y = unit(1, "npc") - label_margin,   # Add top margin
      just = c("left", "top"),             # Align to top-left corner
      gp = gpar(fontsize = label_size, fontface = "bold")  # Set label style
    )
  )
}

space = 0.5
plot <- grid.arrange(
  grobs = list(
    add_label_top_left(fig_secs, 'A'),
    grid::textGrob(""),
    add_label_top_left(fig_iters, 'B')
  ),
  ncol = 3,
  widths = c(30, space, 30),
  heights = c(30)
)

png(file.path(figures_dir, "supp.png"), width = 60*300, height = (30)*300)
grid.draw(plot)
dev.off()
```