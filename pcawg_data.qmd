


```{r}
library(tidyverse)
library(ggplot2)
library(reshape2)
library(BSgenome.Hsapiens.1000genomes.hs37d5) # bioconductor
genome <- BSgenome.Hsapiens.1000genomes.hs37d5

data_path <- "data/PCAWG-UCSC"
```

### 0. Download data from UCSC Xena Browser

See all data available here: https://xenabrowser.net/datapages/?cohort=PCAWG%20(donor%20centric)&removeHub=https%3A%2F%2Fxena.treehouse.gi.ucsc.edu%3A443

```{r}
maf_file_url <- "https://pcawg-hub.s3.us-east-1.amazonaws.com/download/October_2016_whitelist_2583.snv_mnv_indel.maf.xena.nonUS"
maf_file_path <- file.path(data_path, "snv_mnv_indel.maf")
download.file(maf_file_url, maf_file_path, method = 'curl')

histology_file_url <- "https://pcawg-hub.s3.us-east-1.amazonaws.com/download/pcawg_specimen_histology_August2016_v9_donor"
histology_file_path <- file.path(data_path, "pcawg_specimen_histology_August2016_v9_donor")
download.file(histology_file_url, histology_file_path, method = 'curl')
```

### 1. Load Mutational Counts data
This can take a few minutes to load into memory
```{r}
maf_data <- read.csv(maf_file_path, sep = "")
head(maf_data)
```


### 2. Filter to only include SNPS: start = end, not a deletion (alt = '-' is deletion)
```{r}
maf_SNP_data <- maf_data %>%
  filter(start == end, alt != "-")
```


### 3. Match to histology data

The file previously downloaded from the ICGC browser has the following histology codes:
- **Biliary.AdenoCA**
- Bladder.TCC
- **Bone.Benign**
- **Bone.Epith**
- **Bone.Osteosarc**
- **Breast.AdenoCA**
- **Breast.DCIS**
- **Breast.LobularCA**
- CNS.GBM
- **CNS.Medullo**
- CNS.Oligo
- **CNS.PiloAstro**
- Cervix.AdenoCA
- Cervix.SCC
- ColoRect.AdenoCA
- **Eso.AdenoCA**
- **Head.SCC**
- Kidney.ChRCC
- **Kidney.RCC**
- **Liver.HCC**
- Lung.AdenoCA
- Lung.SCC
- **Lymph.BNHL**
- **Lymph.CLL**
- **Myeloid.AML**
- **Myeloid.MDS**
- **Myeloid.MPN**
- **Ovary.AdenoCA**
- **Panc.AdenoCA**
- **Panc.Endocrine**
- **Prost.AdenoCA**
- **Skin.Melanoma**
- SoftTissue.Leiomyo
- SoftTissue.Liposarc
- **Stomach.AdenoCA**
- Thy.AdenoCA
- Uterus.AdenoCA

These match the `histology_abbreviation` in the histology dataset. We can match this to our SNP data by the sample ids. We check that this merge doesn't lose any rows of the dataframe, and we also check which of the groups listed above are present in this data (**bold** groups are present in both, non bold is only in the ICGC browser dataset).

This may take a few minutes to run.
```{r}
histology <- read.csv(histology_file_path, sep = "\t")
head(histology)

maf_SNP_data_histology <- maf_SNP_data %>%
  merge(
    histology %>%
      dplyr::select(icgc_specimen_id, histology_abbreviation), 
    by.x = "Sample",
    by.y = "icgc_specimen_id"
)

nrow(maf_SNP_data)
nrow(maf_SNP_data_histology)
unique(maf_SNP_data_histology$histology_abbreviation) %>% paste(collapse = "\n- ") %>% cat()
```

### 4. Get trinucleotide context around every SBS mutation

`getSeq` is a method for BSgenomes object (such as our `genome` object, define at the top). This gets the sequence at a particular chromosome and location. To find the trinucleotide context around a mutation, we give `start` as one before the mutation position and `end` as one after the mutation position.

This takes a few minutes to run.
```{r}
start = Sys.time()
maf_SNP_data_histology$ref_trinucleotide <- as.data.frame(getSeq(
    genome, 
    maf_SNP_data_histology$chr,
    start = maf_SNP_data_histology$start - 1,
    end = maf_SNP_data_histology$end + 1
))$x
end = Sys.time()
end - start
```

We check that the trunucleotide context makes sense by checking that the center base pair matches the `reference` column. We should see that the mean of check1 is 1.

```{r}
maf_SNP_data_histology %>%
  mutate(
    check1 = substr(ref_trinucleotide, 2, 2) == reference
  ) %>%
  summarize(
    check1 = mean(check1)
  )
```

We now combine the reference trinucleotide and the alternative allele into the SBS format we're used to, e.g., A[T>C]A.

```{r}
maf_SNP_data_histology_SBS <- maf_SNP_data_histology %>%
  mutate(SBS = paste0(
    substr(ref_trinucleotide, 1, 1), 
    '[', reference, '>', alt, ']',
    substr(ref_trinucleotide, 3, 3)
  ))
head(maf_SNP_data_histology_SBS)
```

### 5. Mutation Counts

For each sample in each histology group, count the number of each mutation type. We also keep the `reference` column for use in the next step.

```{r}
SBS_counts <- maf_SNP_data_histology_SBS %>%
  group_by(Sample, SBS, histology_abbreviation, reference) %>% # add coding
  summarize(n = n()) %>%
  ungroup()

head(SBS_counts)
```

### 6. Base Pairing

For mutational signatures, we only include SBS mutations with reference of C or T. For reference of A or G, we use base-pairing rules to convert it. Here, we base pair when needed, then re-aggregate mutation types for each sample in each histology group.

```{r}
base_pair = function(DNA_string_vec) {
  sapply(strsplit(DNA_string_vec, ""), function(parts) {
    parts_out = parts
    parts_out[parts == 'A'] <- 'T'
    parts_out[parts == 'C'] <- 'G'
    parts_out[parts == 'G'] <- 'C'
    parts_out[parts == 'T'] <- 'A'
    paste(parts_out, collapse = '')
  })
}

SBS_counts_base_paired <- SBS_counts %>%
  mutate(
    SBS = case_when(
      reference %in% c('A','G') ~ base_pair(SBS),
      TRUE ~ SBS
    )
  ) %>%
  dplyr::select(-reference) %>%
  group_by(SBS, Sample, histology_abbreviation) %>%
  summarize(n = sum(n)) %>%
  ungroup()

head(SBS_counts_base_paired)
```

### 7. Drop samples with multiple cancer types

```{r}
SBS_counts_base_paired_filtered <- SBS_counts_base_paired %>%
  filter(!grepl(',', histology_abbreviation))

write.csv(SBS_counts_base_paired_filtered, file = file.path(data_path, "all_SBS.csv"))
```

### 8. Saving Data Files

```{r}
for(histology in unique(SBS_counts_base_paired_filtered$histology_abbreviation)) {
  SBS_counts_project = SBS_counts_base_paired_filtered %>%
    filter(histology_abbreviation == histology) %>%
    dplyr::select(-histology_abbreviation) %>%
    pivot_wider(names_from = Sample, values_from = n, values_fill = list(n = 0)) %>%
    arrange(SBS) %>%
    column_to_rownames("SBS")

  print(paste(histology, mean(SBS_counts_project == 0)))

  write.csv(SBS_counts_project, file = file.path(
    data_path, "counts_matrices", 
    paste0(histology, ".csv")
  ))
}
```