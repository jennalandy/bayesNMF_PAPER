
```{r}
library(tidyverse)
library(glue)
library(bayesNMF)
library(ggh4x)
library(cowplot)
library(grid)
library(gridExtra)
library(png)
library(ggplot2)

source("study2_analysis.R")

data_dir = "data/study2"
results_dir = "output/study2"
output_dir = "output/study2_analysis"
figures_dir = "figures/study2"

reference <- get_cosmic()
dim(reference)
```

## BFI and SBFI results

```{r}
files = list.files(results_dir)
files = files[endsWith(files, ".rds") & !grepl("heuristic", files)]
results = do.call(rbind, lapply(files, function(file) {
  file_parts = str_split(file, '_')[[1]]
  N = str_replace(file_parts[1], 'N', '') %>% as.numeric
  G = str_replace(file_parts[2], 'G', '') %>% as.numeric
  rep = str_replace(file_parts[3], 'rep', '') %>% as.numeric
  model = file_parts[4]
  method = str_replace(file_parts[5], '.rds', '')

  res <- NULL
  tryCatch({
    res <- readRDS(file.path(results_dir, file))
  }, error = function(e) {})
  if (is.null(res)) {
    print(paste(file, "not done"))
    return()
  } else if (is.null(res$converged_at)) {
    print(paste(file, "not done"))
    return()
  }

  data_file <- file.path(data_dir, glue("N{N}_G{G}_rep{rep}.rds"))
  data <- readRDS(data_file)

  rank = sum(res$MAP$A)
  print(paste(file, rank))

  Phat <- res$MAP$P
  if (rank == 1) {  Phat <- matrix(Phat, ncol = 1) }
  P_similarity_matrix <- pairwise_sim(data$P, Phat, which = "cols")
  P_hung <- hungarian_algorithm(
    P_similarity_matrix, which = "max"
  )
  P_aligned_similarity_matrix <- P_hung$mat
  
  list(
    file = file,
    N = N,
    G = G,
    rep = rep,
    model = model,
    method = method,
    rank = rank,
    seconds = res$time$total_secs,
    P_min_sim = min(diag(P_aligned_similarity_matrix)),
    precision = calc_precision(Phat, data$P),
    sensitivity = calc_sensitivity(Phat, data$P)
  )
}))

results = results %>%
  data.frame() %>%
  mutate(
    N = as.numeric(N),
    G = as.numeric(G),
    rep = as.numeric(rep),
    file = as.character(file),
    model = factor(as.character(model), levels = c('NT','PT','PG')),
    method = as.character(method),
    rank = as.numeric(rank),
    seconds = as.numeric(seconds),
    P_min_sim = as.numeric(P_min_sim),
    precision = as.numeric(precision),
    sensitivity = as.numeric(sensitivity)
  ) 

write.csv(results, file.path(output_dir, "results_BFI_SBFI.csv"))
```

## Heuristic results

```{r}
files = list.files(results_dir)
files = files[endsWith(files, ".rds") & grepl("heuristic", files) & !grepl("rank", files)]
results = do.call(rbind, lapply(files, function(file) {
  file_parts = str_split(file, '_')[[1]]
  N = str_replace(file_parts[1], 'N', '') %>% as.numeric
  G = str_replace(file_parts[2], 'G', '') %>% as.numeric
  rep = str_replace(file_parts[3], 'rep', '') %>% as.numeric
  model = file_parts[4]
  method = str_replace(file_parts[5], '.rds', '')

  res <- NULL
  tryCatch({
    res <- readRDS(file.path(results_dir, file))
  }, error = function(e) {})
  if (is.null(res)) {
    print(paste(file, "not done"))
    return()
  } else if (length(res$all_models) < 20) {
    print(paste(file, "not done"))
    return()
  }

  rank = sum(res$best_rank)
  print(paste(file, rank))

  data_file <- file.path(data_dir, glue("N{N}_G{G}_rep{rep}.rds"))
  data <- readRDS(data_file)

  Phat <- res$best_model$MAP$P
  if (rank == 1) {  Phat <- matrix(Phat, ncol = 1) }
  P_similarity_matrix <- pairwise_sim(data$P, Phat, which = "cols")
  P_hung <- hungarian_algorithm(
    P_similarity_matrix, which = "max"
  )
  P_aligned_similarity_matrix <- P_hung$mat

  seconds <- sum(sapply(res$all_models, function(model) {
    model$time$total_secs
  }))
  
  list(
    file = file,
    N = N,
    G = G,
    rep = rep,
    model = model,
    method = method,
    rank = rank,
    seconds = seconds,
    P_min_sim = min(diag(P_aligned_similarity_matrix)),
    precision = calc_precision(Phat, data$P),
    sensitivity = calc_sensitivity(Phat, data$P)
  )
}))

results = results %>%
  data.frame() %>%
  mutate(
    N = as.numeric(N),
    G = as.numeric(G),
    rep = as.numeric(rep),
    file = as.character(file),
    model = factor(as.character(model), levels = c('NT','PT','PG')),
    method = as.character(method),
    rank = as.numeric(rank),
    seconds = as.numeric(seconds),
    P_min_sim = as.numeric(P_min_sim),
    precision = as.numeric(precision),
    sensitivity = as.numeric(sensitivity)
  ) 

write.csv(results, file.path(output_dir, "results_heuristic.csv"))
```

## SignatureAnalyzer Results

Use python to load the results and save estimated W (signatures) to a csv
```{python}
import pandas as pd
import os

results_dir = "output/study2_SignatureAnalyzer_withtime"
results_list = os.listdir(results_dir)

for results in results_list:
  file_path = os.path.join(results_dir, results, 'nmf_output.h5')
  try:
    print(file_path)
    W = pd.read_hdf(file_path, 'W')
    W.to_csv(os.path.join(results_dir, results, "W.csv"))
    H = pd.read_hdf(file_path, 'H')
    H.to_csv(os.path.join(results_dir, results, "H.csv"))
  except Exception as e:
    print(file_path, 'can\'t open')
```

```{r}
results_dir = "output/study2_SignatureAnalyzer_withtime"
figures_dir <- "figures/study2"

results_list = list.dirs(results_dir)
results_list = results_list[results_list != results_dir]

time_df <- read.csv(file.path(results_dir, 'runtime_log.csv'))

results <- do.call(rbind, lapply(results_list, function(res) {
  name_parts = str_split(res, '/')[[1]]
  name = name_parts[length(name_parts)]

  file_parts = str_split(name, '_')[[1]]
  N = str_replace(file_parts[1], 'N', '') %>% as.numeric
  G = str_replace(file_parts[2], 'G', '') %>% as.numeric
  rep = str_replace(file_parts[3], 'rep', '') %>% as.numeric
  model = "L2"
  method = "SignatureAnalyzer"

  if (!file.exists(file.path(res, "W.csv"))) {
    print('no')
    return()
  }

  Phat <- read.csv(file.path(res, "W.csv")) %>%
    column_to_rownames("X") %>%
    select(starts_with('S'))
  rank = ncol(Phat)
  print(paste(name, rank))

  data_file <- file.path(data_dir, glue("N{N}_G{G}_rep{rep}.rds"))
  data <- readRDS(data_file)

  # signature analyzer ignored all 0 rows -- add these rows as all 0s to P
  zero_rownames <- rownames(reference)[rowSums(data$M) == 0]
  setdiff(rownames(reference), rownames(Phat))
  if (length(zero_rownames) > 0) {
    fill_zeros <- matrix(
      rep(0, ncol(Phat) * length(zero_rownames)),
      nrow = length(zero_rownames)
    )
    rownames(fill_zeros) <- zero_rownames
    colnames(fill_zeros) <- colnames(Phat)
    Phat <- rbind(
      Phat,
      fill_zeros
    )
    Phat <- Phat[rownames(reference),]
    if (rank == 1) {  Phat <- matrix(Phat, ncol = 1) }
  }

  if (nrow(Phat) != 96) {
    print("WHAT??")
    return()
  }

  P_similarity_matrix <- pairwise_sim(data$P, Phat, which = "cols")
  P_hung <- hungarian_algorithm(
    P_similarity_matrix, which = "max"
  )
  P_aligned_similarity_matrix <- P_hung$mat

  this_N = N
  this_rep = rep
  seconds <- NA
  seconds <- time_df %>%
    filter(N == this_N, rep == this_rep) %>%
    pull(seconds)

  list(
    file = file,
    N = N,
    G = G,
    rep = rep,
    model = model,
    method = method,
    rank = rank,
    seconds = seconds,
    P_min_sim = min(diag(P_aligned_similarity_matrix)),
    precision = calc_precision(Phat, data$P),
    sensitivity = calc_sensitivity(Phat, data$P)
  )
}))

results = results %>%
  data.frame() %>%
  mutate(
    N = as.numeric(N),
    G = as.numeric(G),
    rep = as.numeric(rep),
    file = as.character(file),
    model = factor(as.character(model), levels = c('NT','PT','PG')),
    method = as.character(method),
    rank = as.numeric(rank),
    seconds = as.numeric(seconds),
    P_min_sim = as.numeric(P_min_sim),
    precision = as.numeric(precision),
    sensitivity = as.numeric(sensitivity)
  )

write.csv(results, file.path(output_dir, "results_SA.csv"))
```

## Combine all results and create Figure 2

```{r}
results_BFI_SBFI <- read.csv("/gplab/jlandy/bayesNMF_PAPER/Paper2/output/study2_analysis/results_BFI_SBFI.csv")
results_SA <- read.csv("/gplab/jlandy/bayesNMF_PAPER/Paper2/output/study2_analysis/results_SA.csv")
results_SA$model = "PT"
results_heuristic <- read.csv("/gplab/jlandy/bayesNMF_PAPER/Paper2/output/study2_analysis/results_heuristic.csv")


results <- rbind(
  results_BFI_SBFI,
  rbind(results_heuristic, results_SA)
)

top = 15
```

```{r}
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

names = c(
  'BFI' = "bayesNMF + BFI",
  "SBFI" = "bayesNMF + SBFI",
  "heuristic" = "bayesNMF + BIC",
  "SignatureAnalyzer" = "SignatureAnalyzer + ARD"
)

colors <- c(
  'BFI' = cbPalette[4],
  'SBFI' = cbPalette[6],
  "heuristic" = cbPalette[7],
  'SignatureAnalyzer' = cbPalette[1]
)

colors_names = c()
for (col in names(colors)) {
  colors_names[names[col]] = colors[col]
}
```

```{r}
text_size = 35
title_size = 35

true <- data.frame(
    N = rep(1:top, 4),
    rank = rep(1:top, 4), 
    n = 0, 
    method = c(
      rep('SBFI', top),
      rep('BFI', top),
      rep("heuristic", top),
      rep('SignatureAnalyzer', top)
    )
  ) %>%
  mutate(
    method = case_when(
      method == 'BFI' ~ names['BFI'],
      method == 'SBFI' ~ names['SBFI'],
      method == 'heuristic' ~ names['heuristic'],
      method == 'SignatureAnalyzer' ~ names['SignatureAnalyzer']
    ),
    method = factor(method, levels = names(colors_names))
  )

results %>%
  filter(N <= top) %>%
  mutate(
    method = case_when(
      method == 'BFI' ~ names['BFI'],
      method == 'SBFI' ~ names['SBFI'],
      method == 'heuristic' ~ names['heuristic'],
      method == 'SignatureAnalyzer' ~ names['SignatureAnalyzer']
    ),
    method = factor(method, levels = names(colors_names))
  ) %>%
  group_by(N, method, rank) %>%
  tally() %>%
  data.frame() %>%
  mutate(
    metric = ' Estimated\nRank'
  ) %>%
  ggplot(aes(x = N, y = rank, fill = n, label  = n)) +
  geom_tile(
    data = true,
    fill = 'red'
  ) +
  facet_grid(cols = vars(method), rows = vars(metric), switch = 'y') +
  geom_tile(
    height = 0.9, width = 0.9
  ) +
  geom_text(
    aes(color = n > 4)
  ) +
  labs(
    x = 'True Rank'
  ) +
  scale_x_discrete(breaks = seq(2, 20, by = 2)) +
  theme(
    panel.background = element_rect(fill = "white", color = NA),
    legend.position = 'none',
    text = element_text(size = text_size),
    axis.title = element_text(size = title_size),
    axis.title.y = element_blank(),
    strip.text = element_text(size = title_size),
    strip.placement = 'outside',
    strip.text.y.left = element_text(size = title_size, angle = 0),
    strip.text.x.top = element_text(size = title_size),
    axis.title.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    panel.grid.major.x = element_line(color = "grey", size = 0.5)
  ) +
  scale_fill_gradient(low = "#56B1F7", high = "#132B43") +
  scale_color_manual(values = c('black','white'))

ggsave(file.path(figures_dir, "boxes.png"), height = 7, width = 40)
```


```{r}
results %>%
  filter(N <= top) %>%
  mutate(
    method = case_when(
      method == 'BFI' ~ names['BFI'],
      method == 'SBFI' ~ names['SBFI'],
      method == 'heuristic' ~ names['heuristic'],
      TRUE ~ method
    ),
    method = factor(method, levels = names(colors_names))
  ) %>%
  ggplot(aes(x = N, y = rank, color = method)) +
  geom_abline() +
  geom_jitter(height = 0.5, width = 0.5) +
  geom_smooth() +
  scale_color_manual(values = colors_names) +
  labs(
    x = 'True Rank',
    y = 'Estimated Rank',
    color = 'Method'
  ) +
  theme(
    text = element_text(size = text_size),
    axis.title = element_text(size = title_size),
    legend.title = element_text(size = title_size)
  )
ggsave(file.path(figures_dir, "scatter.png"), height = 10, width = 10)
```


```{r}
results %>%
  filter(N <= top) %>%
  mutate(
    minutes = seconds/60
  ) %>%
  select(-seconds, -P_min_sim) %>%
  pivot_longer(9:11, names_to = 'metric', values_to = 'value') %>%
  mutate(
    metric = str_to_title(metric),
    method = case_when(
      method == 'BFI' ~ names['BFI'],
      method == 'SBFI' ~ names['SBFI'],
      method == 'heuristic' ~ names['heuristic'],
      TRUE ~ method
    ),
    method = factor(method, levels = names(colors_names))
  ) %>%
  ggplot(aes(x = as.factor(N), y = value)) +
  facet_grid(cols = vars(method), rows = vars(metric), scales = 'free', switch = 'y') +
  geom_boxplot() +
  labs(x = 'True Rank') +
  scale_x_discrete(breaks = seq(2, 20, by = 2)) +
  theme(
    text = element_text(size = text_size),
    axis.title = element_text(size = title_size),
    axis.title.y = element_blank(),
    legend.title = element_text(size = title_size),
    strip.placement = 'outside',
    strip.text.y.left = element_text(size = title_size, angle = 0),
    strip.text.x.top = element_blank()
  )

ggsave(file.path(figures_dir, "metrics.png"), height = 7*3, width = 40)
```

```{r}
results %>%
  filter(N <= top) %>%
  mutate(
    minutes = seconds/60
  ) %>%
  select(-seconds, -P_min_sim) %>%
  pivot_longer(9:11, names_to = 'metric', values_to = 'value') %>%
  filter(metric == 'minutes') %>%
  mutate(
    # metric = str_to_title(metric),
    metric = '  Minutes  ',
    method = case_when(
      method == 'BFI' ~ names['BFI'],
      method == 'SBFI' ~ names['SBFI'],
      method == 'heuristic' ~ names['heuristic'],
      TRUE ~ method
    ),
    method = factor(method, levels = names(colors_names))
  ) %>%
  ggplot(aes(x = as.factor(N), y = value)) +
  facet_grid(cols = vars(method), rows = vars(metric), scales = 'free', switch = 'y') +
  geom_boxplot() +
  labs(x = 'True Rank') +
  scale_x_discrete(breaks = seq(2, 20, by = 2)) +
  theme(
    text = element_text(size = text_size),
    axis.title = element_text(size = title_size),
    axis.title.y = element_blank(),
    legend.title = element_text(size = title_size),
    strip.placement = 'outside',
    strip.text.y.left = element_text(size = title_size, angle = 0),
    strip.text.x.top = element_blank()
  )

ggsave(file.path(figures_dir, "minutes.png"), height = 7, width = 40)
```

```{r}
results %>%
  filter(N <= top) %>%
  mutate(
    minutes = seconds/60
  ) %>%
  select(-seconds, -P_min_sim) %>%
  pivot_longer(9:11, names_to = 'metric', values_to = 'value') %>%
  filter(metric == 'precision') %>%
  mutate(
    # metric = str_to_title(metric),
    metric = ' Precision ',
    method = case_when(
      method == 'BFI' ~ names['BFI'],
      method == 'SBFI' ~ names['SBFI'],
      method == 'heuristic' ~ names['heuristic'],
      TRUE ~ method
    ),
    method = factor(method, levels = names(colors_names))
  ) %>%
  ggplot(aes(x = as.factor(N), y = value)) +
  facet_grid(cols = vars(method), rows = vars(metric), scales = 'free', switch = 'y') +
  geom_boxplot() +
  labs(x = 'True Rank') +
  scale_x_discrete(breaks = seq(2, 20, by = 2)) +
  theme(
    text = element_text(size = text_size),
    axis.title = element_text(size = title_size),
    axis.title.y = element_blank(),
    legend.title = element_text(size = title_size),
    strip.placement = 'outside',
    strip.text.y.left = element_text(size = title_size, angle = 0),
    strip.text.x.top = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank()
  )

ggsave(file.path(figures_dir, "precision.png"), height = 7, width = 40)
```


```{r}
results %>%
  filter(N <= top) %>%
  mutate(
    minutes = seconds/60
  ) %>%
  select(-seconds, -P_min_sim) %>%
  pivot_longer(9:11, names_to = 'metric', values_to = 'value') %>%
  filter(metric == 'sensitivity') %>%
  mutate(
    # metric = str_to_title(metric),
    metric = 'Sensitivity',
    method = case_when(
      method == 'BFI' ~ names['BFI'],
      method == 'SBFI' ~ names['SBFI'],
      method == 'heuristic' ~ names['heuristic'],
      TRUE ~ method
    ),
    method = factor(method, levels = names(colors_names))
  ) %>%
  ggplot(aes(x = as.factor(N), y = value)) +
  facet_grid(cols = vars(method), rows = vars(metric), scales = 'free', switch = 'y') +
  geom_boxplot() +
  labs(x = 'True Rank') +
  scale_x_discrete(breaks = seq(2, 20, by = 2)) +
  theme(
    text = element_text(size = text_size),
    axis.title = element_text(size = title_size),
    axis.title.y = element_blank(),
    legend.title = element_text(size = title_size),
    strip.placement = 'outside',
    strip.text.y.left = element_text(size = title_size, angle = 0),
    strip.text.x.top = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank()
  )

ggsave(file.path(figures_dir, "sensitivity.png"), height = 7, width = 40)
```

```{r}
res_file <- file.path(results_dir, "N5_G64_rep1_PT_SBFI.rds")
res <- readRDS(res_file)

plot = bayesNMF::plot_sig(res, sig = 2) +
  theme(
    text = element_text(size = text_size/4),
    title = element_text(size = text_size/4)
  )
title = ggplot_build(plot)$plot$labels$title
title = str_replace(title, '\n', '')
plot = plot + labs(
  title = gsub("\n", " | ", title)
)

ggsave(file = file.path(figures_dir, "sig.png"), height = 2.5)
```

Load into rasterGrob objects 
```{r}
png_rank = readPNG(file.path(figures_dir, "boxes.png"))
fig_rank = rasterGrob(png_rank, interpolate = TRUE)

png_precision = readPNG(file.path(figures_dir, "precision.png"))
fig_precision = rasterGrob(png_precision, interpolate = TRUE)

png_sensitivity = readPNG(file.path(figures_dir, "sensitivity.png"))
fig_sensitivity = rasterGrob(png_sensitivity, interpolate = TRUE)

png_minutes = readPNG(file.path(figures_dir, "minutes.png"))
fig_minutes = rasterGrob(png_minutes, interpolate = TRUE)

png_sig = readPNG(file.path(figures_dir, "sig.png"))
fig_sig = rasterGrob(png_sig, interpolate = TRUE)
```

Combine with gridExtra
```{r}
space = 0.5
add_label_top_left <- function(grob, label, label_size = 200, label_margin = unit(0, "lines")) {
  gridExtra::arrangeGrob(
    grob,
    top = textGrob(
      label,
      x = unit(0, "npc") + label_margin,   # Align to left with margin
      y = unit(1, "npc") - label_margin,   # Add top margin
      just = c("left", "top"),             # Align to top-left corner
      gp = gpar(fontsize = label_size, fontface = "bold")  # Set label style
    )
  )
}

plot <- grid.arrange(
  grobs = list(
    # legend,
    add_label_top_left(fig_rank, 'A'),
    # add_label_top_left(fig_metrics, 'B'),

    add_label_top_left(fig_precision, 'B'),
    add_label_top_left(fig_sensitivity, 'C'),
    add_label_top_left(fig_minutes, 'D'),
    
    grid::textGrob(""),
    add_label_top_left(fig_sig, 'E')
  ),
  ncol = 1,
  heights = c(7, 7, 7, 7, space, 9),
  widths = c(40)
)

png(file.path(figures_dir, "figure2.png"), width = 40*300, height = (7*4 + 8)*300)
grid.draw(plot)
dev.off()
```
