---
title: "Analyzing bayesNMF and SignatureAnalyzer results on PCAWG data"
author: "Jenna Landy"
---

```{r}
library(ggplot2)
library(ggthemes)
library(scales)
library(ggbreak)
library(ggrepel)
library(patchwork)
library(scales)
library(tidyverse)
library(bayesNMF)
library(glue)
library(ggthemes)
library(gginnards)
library(ggedit)
library(grid)
library(png)
library(gridExtra)
library(ggpubr)

source("pcawg_analysis_bayesNMF.R")
source("pcawg_analysis_SignatureAnalyzer.R")

reference <- get_cosmic()
dim(reference)

processed_dir <- "../../processed/PCAWG/"

drop <- c('Bone Benign','Breast LobularCA')
```

## bayesNMF Results

Load all samplers and save to a shared rds
```{r eval = FALSE}
results_dir <- "../../output/PCAWG/bayesNMF"
figures_dir <- "../../figures/PCAWG/bayesNMF"

bayesNMF_all_res = list()
res_dirs <- list.dirs(results_dir)
res_dirs <- res_dirs[res_dirs != results_dir]

for (dir in res_dirs) {
  name_parts = str_split(dir, '/')[[1]]
  name = name_parts[length(name_parts)]
  name = str_replace(name, '_', ' ')
  print(name)

  file = file.path(dir, "sampler.rds")
  if (!file.exists(file)) {
    print(paste("File does not exist:", file))
    next
  }

  res <- readRDS(file)
  bayesNMF_all_res[[name]] <- res
}
saveRDS(bayesNMF_all_res, file = file.path(processed_dir, "bayesNMF_all_res.rds"))
```

```{r}
bayesNMF_all_res <- readRDS(file.path(processed_dir, "bayesNMF_all_res.rds"))
```

```{r}
reference <- reference[rownames(bayesNMF_all_res[[1]]$data),]
```

Get summary df and save
```{r eval = FALSE}
bayesNMF_summary <- do.call(rbind, lapply(names(bayesNMF_all_res), function(name) {
  if (name %in% drop) {return(NULL)}
  print(name)
  res <- bayesNMF_all_res[[name]]
  df <- summary(res, reference_P = reference)
  df$histology <- name
  return(df)
}))
write.csv(bayesNMF_summary, file.path(processed_dir, "bayesNMF_summary.csv"))
```

```{r}
bayesNMF_summary <- read.csv(file.path(processed_dir, "bayesNMF_summary.csv"))
length(unique(bayesNMF_summary$histology))
```

```{r}
pl <- bayesNMF::plot_summary(bayesNMF_all_res, reference_P = reference, keep_all_ref = TRUE) +
  theme(legend.key.height = unit(1.5, "cm")) 

ggsave(file.path(figures_dir, "bayesNMF_summary.png"), pl, height = 20, width = 18)
```

```{r}
# flipped
title_size = 35
font_size = 20

color_range = 2**seq(
  floor(log(min(bayesNMF_summary$Med_Contribution), base = 2)),
  ceiling(log(max(bayesNMF_summary$Med_Contribution), base = 2)),
  by = 2
)

bayesNMF_summary_flipped <- bayesNMF_summary %>%
  dplyr::mutate(
    Name_G = paste0(histology, " (", G, ")"),
    Signature = factor(Reference_Signature, levels = rev(colnames(reference)))
  ) %>%
  filter(Med_Contribution >= 0) %>%
  ggplot2::ggplot(ggplot2::aes(
    y = Name_G, x = Signature, color = Med_Contribution
  )) +
  ggplot2::geom_point(ggplot2::aes(size = Cosine_Similarity)) +
  ggplot2::scale_x_discrete(
    position = "top",
    limits = colnames(reference)
  ) +
  ggplot2::scale_size_continuous(
    breaks = c(0, 0.25, 0.5, 0.75, 1),
    limits = c(0, 1)
   ) +
  ggplot2::scale_color_gradient(
    low = 'yellow', high = 'blue', trans = 'log2',
    breaks = color_range,
    limits = c(min(color_range), max(color_range))
  ) +
  ggplot2::labs(
    color = "Median Contribution\n(# Mutations)",
    size = "Maximum a Posteriori\nCosine Similarity to\nReference Signature",
    y = 'Cancer Histology Group'
  ) +
  ggplot2::theme(
    text = ggplot2::element_text(size = font_size),
    axis.title = ggplot2::element_text(size = title_size),
    legend.title = ggplot2::element_text(size = title_size),
    legend.text = element_text(size = font_size),
    axis.text.x = ggplot2::element_text(angle = 90, hjust = 0, vjust = 0.5),
    plot.title = ggplot2::element_text(hjust = 0.5),
    plot.margin = margin(5, 10, 5, 5) ,
    legend.key.height = unit(2.5, "lines")
  ) +
  guides(
    color = guide_colorbar(order = 1),
    size = guide_legend(order = 2)
  )

ggsave(file.path(figures_dir, "bayesNMF_summary_flipped.png"), bayesNMF_summary_flipped,height = 10, width = 25)
```

## SignatureAnalyzer Results

```{r}
results_dir <- "../../output/PCAWG/SignatureAnalyzer"
processed_dir <- "../../processed/PCAWG/SignatureAnalyzer"
figures_dir <- "../../figures/PCAWG/SignatureAnalyzer"
```

Use python to load the results and save estimated W (signatures) to a csv
```{python}
import pandas as pd
import os

results_dir = "../../output/PCAWG/SignatureAnalyzer"
results_list = os.listdir(results_dir)

for results in results_list:
  print(results)
  file_path = os.path.join(results_dir, results, 'nmf_output.h5')
  W = pd.read_hdf(file_path, 'W')
  W.to_csv(os.path.join(results_dir, results, "W.csv"))
  H = pd.read_hdf(file_path, 'H')
  H.to_csv(os.path.join(results_dir, results, "H.csv"))
```


```{r eval = FALSE}
results_list = list.dirs(results_dir)
results_list = results_list[results_list != results_dir]

results_df <- do.call(rbind, lapply(results_list, function(res) {
  name_parts = str_split(res, '/')[[1]]
  name = name_parts[length(name_parts)]
  print(name)

  Phat <- read.csv(file.path(res, "W.csv")) %>%
    column_to_rownames("X") %>%
    select(starts_with('S'))

  Ehat <- read.csv(file.path(res, "H.csv")) %>%
    column_to_rownames("X") %>%
    select(starts_with('S')) %>%
    t()

  # rescale so P columns sum to 1
  Ehat <- sweep(Ehat, 1, colSums(Phat), '*')
  Phat <- sweep(Phat, 2, colSums(Phat), '/')

  sim <- pairwise_sim(Phat, reference)
  if (ncol(Phat) == 1) {
    sim <- matrix(sim, nrow = 1)
    colnames(sim) <- colnames(reference)
    rownames(sim) <- colnames(Phat)
  }
  assigned <- hungarian_algorithm(sim)

  Med_Contribution = apply(Ehat, 1, function(row) {
    if (sum(row > 0) == 0) {
      val = 0
    } else {
      val = median(row[row > 0])
    }
    return(val)
  })

  df <- data.frame(
    Name = name,
    n = rownames(assigned),
    Signature = colnames(assigned),
    Cosine_Similarity = diag(assigned),
    Med_Contribution = Med_Contribution,
    G = ncol(Ehat)
  )
  return(df)
}))

write.csv(results_df, file.path(processed_dir, "out.csv"))
results_df <- results_df %>%
  dplyr::mutate(
    Name_G = paste0(Name, " (", G, ")"),
    Signature = factor(Signature, levels = rev(colnames(reference)))
  )
```

```{r}
drop <- c("Bone_Benign", "Breast_LobularCA")
results_df <- read.csv(file.path(processed_dir, "out.csv")) %>%
  filter(!(Name %in% drop))
```

```{r}
# flipped
title_size = 35
font_size = 20

signatureanalyzer_summary_flipped <- results_df %>%
  mutate(
    Name_G = paste0(Name, " (", G, ")"),
  ) %>%
  filter(Med_Contribution >= 0) %>%
  ggplot2::ggplot(ggplot2::aes(
    y = Name_G, x = Signature, color = Med_Contribution
  )) +
  ggplot2::geom_point(ggplot2::aes(size = Cosine_Similarity)) +
  ggplot2::scale_x_discrete(
    position = "top",
    limits = colnames(reference)
  ) +
  ggplot2::scale_size_continuous(
    breaks = c(0, 0.25, 0.5, 0.75, 1),
    limits = c(0, 1)
   ) +
  ggplot2::scale_color_gradient(
    low = 'yellow', high = 'blue', trans = 'log2',
    breaks = color_range,
    limits = c(min(color_range), max(color_range))
  ) +
  ggplot2::labs(
    color = "Median Contribution\n(# Mutations)",
    size = "Maximum a Posteriori\nCosine Similarity to\nReference Signature",
    y = 'Cancer Histology Group'
  ) +
  ggplot2::theme(
    text = ggplot2::element_text(size = font_size),
    axis.title = ggplot2::element_text(size = title_size),
    legend.title = ggplot2::element_text(size = title_size),
    legend.text = element_text(size = font_size),
    axis.text.x = ggplot2::element_text(angle = 90, hjust = 0, vjust = 0.5),
    plot.title = ggplot2::element_text(hjust = 0.5),
    plot.margin = margin(5, 10, 5, 5) ,
    legend.key.height = unit(2.5, "lines")
  ) +
  guides(
    color = guide_colorbar(order = 1),
    size = guide_legend(order = 2)
  )

ggsave(file.path(figures_dir, "signatureanalyzer_summary_flipped.png"), signatureanalyzer_summary_flipped, height = 10, width = 25)
```

## Comparing methods

```{r}
figures_dir = "../../figures/PCAWG/results"
```

```{r}
colors = list(
  'bayesNMF' = "#2196F3",
  'both' = "#9C27B0",
  'SignatureAnalyzer' = "#F44336"
)

shapes = list(
  'bayesNMF' = 24,
  'both' = 23,
  'SignatureAnalyzer' = 25
)
```

#### Ranks

```{r}
# load data saved above
bayesNMF_df <- bayesNMF_summary %>% dplyr::select(-N)
SignatureAnalyzer_df <- results_df %>% dplyr::select(-n, -X) %>%
mutate(Name = str_replace(Name, "_", " "))

bayesNMF_df$Name <- bayesNMF_df$histology
bayesNMF_df$Signature <- bayesNMF_df$Reference_Signature
bayesNMF_df <- bayesNMF_df[,colnames(SignatureAnalyzer_df)]

combo_df = bayesNMF_df %>%
  mutate( method = 'bayesNMF') %>%
  rbind(
    ., SignatureAnalyzer_df %>%
    mutate(method = 'SignatureAnalyzer')
  )


ranks <- combo_df %>%
  group_by(Name, method) %>%
  tally() %>%
  ungroup()

same_rows <- ranks %>%
  group_by(Name, n) %>%
  summarize(both = length(unique(method)) == 2) %>%
  filter(both)
```

### Comparing ranks between methods

```{r}
ranks_greyscale <- ranks %>%
  merge(combo_df %>% select(Name, G)) %>%
  mutate(Name_G = paste0(Name, " (", G, ")"), Name_G = factor(Name_G, levels = unique(Name_G))) %>%
  mutate(
    method = ifelse(
      Name %in% same_rows$Name,
      'both',
      method
    )
  ) %>%
  unique() %>%
  ggplot(aes(y = Name, x = n, shape = method, color = method, fill = method)) +
  geom_point(size = 1) +
  scale_shape_manual(values = shapes) +
  scale_color_manual(values = colors) +
  scale_fill_manual(values = colors) +
  theme_light(base_size = 12) +
  theme(
    text = element_text(size = 12),
    legend.position = "top",
    legend.justification = "left",
    legend.text = element_text(size = 9),
    legend.title = element_text(size = 10),
    legend.key.size = unit(0.1, "lines"),
    strip.placement = 'outside',
    strip.background = element_rect(fill = "white", color = 'grey'),
    strip.text = element_text(color = "black"),
    strip.text.y.left = element_text(angle = 0),
    panel.grid.major = element_line(size = 0.3),
    panel.grid.minor = element_line(size = 0.1),
    plot.background = element_rect(fill = "white"),
    axis.title.y = element_blank()
  ) +
  labs(
    y = 'Cancer Histology Group',
    x = 'Estimated\nRank',
    color = 'Method', shape = 'Method', fill = 'Method'
  ) +
  scale_x_continuous(
    lim = c(0, 30),
    breaks = seq(0, 30, by = 10),
    minor_breaks = seq(0, 30, by = 1),
    position = "top"
  )
ranks_greyscale
```

### Comparing signatures identified by one method, the other, or both 

```{r}
# only include signatures that were identified by at least one method for space
included_signatures <- combo_df %>% filter(!(Name == "Skin Melanoma")) %>% pull(Signature) %>% unique()
# order based on reference column names
included_signatures <- included_signatures[order(match(included_signatures, colnames(reference)))]
included_signatures_noSBS <- str_remove(included_signatures, "SBS")


assignments_greyscale <- combo_df %>%
  filter(Name != "Skin Melanoma") %>%
  mutate(
    Name_G = paste0(Name, " (", G, ")"), Name_G = factor(Name_G, levels = unique(Name_G)),
    Signature = str_remove(Signature, "SBS"),
    Signature = factor(Signature, levels = included_signatures_noSBS)
  ) %>%
  group_by(Name_G, Signature) %>%
  summarize(
    bayesNMF = "bayesNMF" %in% method,
    SignatureAnalyzer = "SignatureAnalyzer" %in% method
  ) %>%
  mutate(
    which = case_when(
      bayesNMF & SignatureAnalyzer ~ "both",
      bayesNMF ~ "bayesNMF",
      SignatureAnalyzer ~ "SignatureAnalyzer"
    )
  ) %>%
  ggplot(aes(
    y = Name_G, x = Signature, shape = which, color = which, fill = which
  )) +
  geom_point(size = 1) +
  ggplot2::scale_x_discrete(
    position = "top"
  ) +
  ggplot2::scale_shape_manual(values = shapes) +
  ggplot2::scale_color_manual(values = colors) +
  ggplot2::scale_fill_manual(values = colors) +
  labs(
    color = 'Method', fill = 'Method', shape = 'Method',
    y = 'Cancer Histology Group'
  ) +
  theme_light(base_size = 12) +
  theme(
    text = element_text(size = 12),
    legend.position = "top",
    legend.justification = "left",
    legend.text = element_text(size = 9),
    legend.title = element_text(size = 10),
    legend.key.size = unit(0.1, "lines"),
    strip.placement = 'outside',
    strip.background = element_rect(fill = "white", color = 'grey'),
    strip.text = element_text(color = "black"),
    strip.text.y.left = element_text(angle = 0),
    panel.grid.major = element_line(size = 0.2),
    panel.grid.minor = element_line(size = 0.1),
    plot.background = element_rect(fill = "white"),
    axis.title.y = element_blank(),
    axis.text.x.top = element_text(angle = 90, hjust = 0, vjust = 0.5)
  )
```

### Combine rank and assignment plots


```{r}
# extract legend from fig1A
g_legend <- function(a.gplot) {
  # from https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

legend_greyscale <- g_legend(assignments_greyscale)
blank <- ggplot() + theme_void()
margin <- 0.02

assignments_greyscale_with_caption <- assignments_greyscale + 
    ggtitle("A.") +
    labs(x = "COSMIC v3.3.1 SBS Signature") +
    theme(
      plot.title.position = "plot",
      plot.title = element_text(size = 12),
      legend.position = "none",
      axis.text.x.top = element_text(size = 6),
      axis.text.y = element_text(size = 7),
      plot.margin = unit(c(0, 0, 0, 0), "cm")
    )

ranks_greyscale_with_caption <- ranks_greyscale + 
    ggtitle("B.") +
    theme(
      plot.title.position = "plot",
      plot.title = element_text(size = 12),
      legend.position = "none",
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank(),
      plot.margin = unit(c(0, 0.05, 0, 0.2), "cm")
    )
    
g1 <- ggplotGrob(assignments_greyscale_with_caption)
g2 <- ggplotGrob(ranks_greyscale_with_caption)

# Make left/right columns the same width
maxh <- unit.pmax(g1$heights, g2$heights)
g1$heights <- maxh
g2$heights <- maxh

fig_greyscale <- gridExtra::arrangeGrob(
  gridExtra::arrangeGrob(g1, g2, nrow = 1, widths = c(5, 1)),
  legend_greyscale,
  nrow = 2,
  heights = c(10, 1)
)

ggsave(file.path(figures_dir, "pcawg_greyscale.png"), fig_greyscale, width = 7, height = 5)
```

### Additional results: summary plots and table of ranks

```{r}
combo <- gridExtra::arrangeGrob(
  bayesNMF_summary_flipped +
    ggtitle("A. bayesNMF Results") +
    theme_light(base_size = 12) +
    theme(
      axis.text.x.top = element_text(angle = 90, hjust = 0, vjust = 0.5),
      axis.text.y = element_text(size = 14),
      axis.title = element_text(size = 14),
      plot.title = element_text(size = 20),
      plot.title.position = "plot",
      legend.position = "none"
    ),
  # blank
  grid::textGrob(""),
  signatureanalyzer_summary_flipped +
    ggtitle("B. SignatureAnalyzer Results") +
    theme_light(base_size = 12) +
    theme(
      axis.text.x.top = element_text(angle = 90, hjust = 0, vjust = 0.5),
      axis.text.y = element_text(size = 14),
      axis.title = element_text(size = 14),
      plot.title = element_text(size = 20),
      plot.title.position = "plot",
      legend.position = "bottom"
    ) +
    guides(
      color = guide_colorbar(barwidth = unit(8, "cm"))
    ),
  nrow = 3, heights = c(1, 0.01, 1.2)
)

ggsave(file.path(figures_dir, "pcawg_extended_results.png"), combo, width = 16, height = 20)
```

```{r}
ranks %>%
  pivot_wider(names_from = method, values_from = n) %>%
  knitr::kable(format = "latex")
```

## Additional results: posterior uncertainty around assignment

Add columns to bayesNMF dataframe for each estimated signature
- majority_sig_weight: voting weight given to its assigned reference signature
- SA_sig_weight: voting weight given to its a reference signature also estimated by SignatureAnalyzer

Sometimes these are the same, but sometimes a "second choice" reference signature matches the SignatureAnalyzer results, while the majority voted reference signature does not.

```{r}
name_current = ""
majority_sig_weights <- vector(length = nrow(bayesNMF_df))
SA_sig_weights <- vector(length = nrow(bayesNMF_df))

for (i in 1:nrow(bayesNMF_df)) {
  row = bayesNMF_df[i,]

  if (row$Name != name_current) {
    print(row$Name)
    name_current = row$Name
    assignment_res <- bayesNMF_all_res[[name_current]]$assign_signatures_ensemble(reference)
  }
  
  majority_sig_weights[i] <- assignment_res$votes %>%
    group_by(sig_est) %>%
    summarize_all(first) %>%
    filter(sig_ref == row$Signature) %>%
    pull(prop_votes)

  this_sig_est <- assignment_res$assignment %>%
    filter(sig_ref == row$Signature) %>%
    pull(sig_est)

  SA_sigs <- SignatureAnalyzer_df %>%
    filter(Name == row$Name) %>%
    pull(Signature)

  SA_sig_weights[i] <- assignment_res$votes %>%
    filter(sig_est == this_sig_est, sig_ref %in% SA_sigs) %>%
    pull(prop_votes) %>%
    sum()
}
bayesNMF_df$majority_sig_weight = majority_sig_weights
bayesNMF_df$SA_sig_weight = SA_sig_weights

write.csv(bayesNMF_df, file.path(processed_dir, "bayesNMF_df.csv"))
```

Add a column to bayesNMF identifying whether the sig was assigned to that histology group by SignatureAnalyzer
```{r}
bayesNMF_rows <- bayesNMF_df %>% 
  dplyr::select(Name, Signature) %>%
  apply(1, function(row) {paste(row, collapse = "")})

overlap_rows <- bayesNMF_df %>% 
  dplyr::select(Name, Signature) %>%
  intersect(
    SignatureAnalyzer_df %>%
      dplyr::select(Name, Signature)
  ) %>%
  apply(1, function(row) {paste(row, collapse = "")})

bayesNMF_df$overlap <- bayesNMF_rows %in% overlap_rows
write.csv(bayesNMF_df, file.path(processed_dir, "bayesNMF_df.csv"))
```

1. proportion of votes to assigned sig, separately for overlapped and non overlapped
```{r}
voting_weight <- bayesNMF_df %>%
  mutate(
    overlap = ifelse(overlap, "Assigned by\nboth", "Assigned by\nbayesNMF only")
  ) %>%
  ggplot(aes(x = weight)) +
  facet_grid(rows = vars(overlap), scale = 'free', switch = 'y') +
  geom_histogram(bins = 10) +
  geom_density(color = 'red', size = 2) +
  labs(
    x = 'Voting weight on assigned signature',
    y = ""
  ) +
  theme(
    text = element_text(size = 20),
    strip.text.y.left = element_text(angle = 0)
  )
ggsave(file.path(figures_dir, "voting_weight.png"), voting_weight, height = 7, width = 7)

bayesNMF_df %>%
  group_by(overlap) %>%
  summarize(
    mean_weight = mean(weight),
    prop_over_09 = mean(weight > 0.95)
  )
```

2. cosine sim, separately for overlapped and non overlapped
```{r}
cosine_sim <- bayesNMF_df %>%
  mutate(
    overlap = ifelse(overlap, "Assigned by\nboth", "Assigned by\nbayesNMF only")
  ) %>%
  ggplot(aes(x = Cosine_Similarity)) +
  facet_grid(rows = vars(overlap), scale = 'free', switch = 'y') +
  geom_histogram(bins = 10) +
  geom_density(color = 'red', size = 2) +
  labs(
    x = 'Cosine similarity on assigned signature',
    y = ""
  ) +
  theme(
    text = element_text(size = 20),
    strip.text.y.left = element_text(angle = 0)
  )
ggsave(file.path(figures_dir, "cosine_sim.png"), cosine_sim, height = 7, width = 7)

bayesNMF_df %>%
  group_by(overlap) %>%
  summarize(
    mean_cos = mean(Cosine_Similarity),
    prop_over_09 = mean(Cosine_Similarity > 0.95)
  )
```

```{r}
nooverlap_SA_sig_weights <- bayesNMF_df %>%
  filter(!overlap) %>%
  pull(SA_sig_weight)

hist(nooverlap_SA_sig_weights, breaks = 10)
table(nooverlap_SA_sig_weights > 0)
mean(nooverlap_SA_sig_weights > 0)
```

Identify cases where the bayesNMF result is truly unique, after considering posterior uncertainty around assignment
```{r}
bayesNMF_df_noover %>%
  filter(SA_weights == 0)
```

Combine plots
```{r}
fig_uncertainty <- gridExtra::arrangeGrob(
  cosine_sim +
    theme_light(base_size = 12) +
    labs(x = "Cosine Similarity to Assigned Signature") +
    ggtitle("A. Cosine Similarity") +
    theme(
      plot.title.position = "plot",
      strip.text.y.left = element_text(angle = 0, color = "black"),
      strip.background = element_rect(fill = "white", color = 'black', linewidth = 0.5),
      plot.background = element_rect(fill = "white", color = 'black', linewidth = 0.5)
    ),
  voting_weight+
    theme_light(base_size = 12) +
    labs(x = "Voting Weight on Assigned Signature") +
    ggtitle("B. Voting Weight") +
    theme(
      plot.title.position = "plot",
      strip.text.y.left = element_text(angle = 0, color = "black"),
      strip.background = element_rect(fill = "white", color = 'black', linewidth = 0.5),
      plot.background = element_rect(fill = "white", color = 'black', linewidth = 0.5)
    ),
  ncol = 2
)

ggsave(file.path(figures_dir, "pcawg_uncertainty.png"), fig_uncertainty, width = 10, height = 5)
```