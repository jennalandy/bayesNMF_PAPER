---
title: "Simulating study 2 sparse data"
author: "Jenna Landy"
---

```{r}
library(MCMCpack)
library(glue)
library(bayesNMF)

data_dir <- "../../data/study2_sparse"
figures_dir <- "../../figures/study2_sparse"
```

## Set Parameters
```{r}
reference <- get_cosmic()

G <- 64
Ns <- 1:20
K <- nrow(reference)

Nreps <- 10

cos_threshold <- 0.8
```

***mean_mutations_per_signature is the key difference between this sparse version and regular study 2
***

```{r}
# set hyperparameters for distribution of m_g ~ NB(r * N, p)
p <- 0.1
mean_mutations_per_signature <- 100 # r(1-p)/p
r <- mean_mutations_per_signature * p / (1 - p)

hist(rnbinom(10000, size = r*4, prob = p))
```

## Simulate
Each data object is a list containing
- M: data matrix (mutational counts), K mutation types x G samples
- P: generating factors (mutational signatures), K mutation types x N factors
- E: generating weights (exposures), N factors x G samples

```{r}
set.seed(321)
sparsity <- data.frame(N = numeric(), G = numeric(), sparsity = numeric(), median_count = numeric())
for (N in Ns) {
  for (rep in 1:Nreps) {
    # sample a subset of N reference signatures
    # require no sampled signatures have cosine similarity > cos_threshold
    sigs <- c()
    available_sigs <- 1:ncol(reference)
    while(length(sigs) < N & length(available_sigs) > 0) {
      if (length(sigs) > 0) {
        sim <- pairwise_sim(reference[,sigs], reference[,available_sigs])
        remove <- which(colSums(sim > cos_threshold) > 0)
        available_sigs <- available_sigs[!available_sigs %in% available_sigs[remove]]
      }
      sampled <- sample(available_sigs, size = 1)
      sigs <- c(sigs, sampled)
    }
    if(length(sigs) < N) {
      print(paste0("Warning: only ", length(sigs), " signatures sampled for N = ", N, " rep = ", rep))
      stop("Not enough signatures sampled")
      next
    }
    sim <- pairwise_sim(reference[,sigs], reference[,sigs])
    stopifnot(all(colSums(sim > cos_threshold) == 1)) # the allowed 1 is with themselves

    P <- as.matrix(reference[,sigs])
    if (N == 1) {
      P = matrix(P, ncol = 1)
    }

    # sample m_g = E[# mutations for subject g]
    # scales with number of signatures, so all signatures have 
    # approximately equal power
    m <- rnbinom(G, size = r * N, prob = p)

    # sample contributions Eg and mutational counts Mg
    E <- matrix(nrow = N, ncol = G)
    M <- matrix(nrow = K, ncol = G)
    for (g in 1:G) {
      probs <- rdirichlet(1, rep(1, N))
      E[,g] <- rmultinom(1, size = m[g], prob = probs)
      M[,g] <- rpois(K, P%*%E[,g])
    }

    # save full dataset
    data <- list(
      M = M,
      P = P,
      E = E
    )
    saveRDS(data, file = file.path(
      data_dir, 
      glue("N{N}_G{G}_rep{rep}.rds")
    ))
    sparsity <- rbind(sparsity, data.frame(N = N, G = G, sparsity = mean(M == 0), median_count = median(M)))
  }
}
write.csv(sparsity, file.path(data_dir, "sparsity.csv"), row.names = FALSE)
```

```{r}
sparsity_plot <- sparsity %>%
  ggplot(aes(x = N, y = sparsity)) +
  geom_point() +
  theme_light(base_size = 12) +
  labs(x = "Number of Signatures (N)", y = "Sparsity") +
  theme(
    plot.background = element_rect(fill = "white", color = "black", linewidth = 0.5),
    plot.title.position = "plot"
  )
ggsave(file.path(figures_dir, "sparsity.png"))


sparsity_plot_median_count <- sparsity %>%
  ggplot(aes(x = N, y = median_count)) +
  geom_jitter() +
  theme_light(base_size = 12) +
  labs(x = "Number of Signatures (N)", y = "Median Count") +
  theme(
    plot.background = element_rect(fill = "white", color = "black", linewidth = 0.5),
    plot.title.position = "plot"
  )
ggsave(file.path(figures_dir, "median_count.png"))

## combine
data_plot <- gridExtra::grid.arrange(
  sparsity_plot + ggtitle("A. Sparsity"),
  sparsity_plot_median_count + ggtitle("B. Median Count"),
  ncol = 2
)
ggsave(file.path(figures_dir, "sparsity_data.png"), data_plot, width = 10, height = 5)
saveRDS(data_plot, file.path(figures_dir, "sparsity_data.rds"))
```

Separately, save a csv file of the $M$ data matrix for each simulation (this is needed to run SignatureAnalyzer).
```{r}
files = list.files(data_dir)
files = files[grepl('.rds', files)]
for (file in files) {
  data = readRDS(file.path(data_dir, file))
  rownames(data$M) = rownames(reference)
  write.csv(
    data$M, 
    file.path(data_dir, str_replace(file, '.rds', '.csv'))
  )
}
```