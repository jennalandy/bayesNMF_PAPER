---
title: "Analyzing bayesNMF and SignatureAnalyzer results on study 2 data"
author: "Jenna Landy"
---

```{r}
library(tidyverse)
library(ggplot2)
library(bayesNMF)
library(ggh4x)
library(cowplot)
library(glue)
library(ggpattern)

data_dir <- "../../data/study2"
output_dir <- "../../output/study2"
processed_dir <- "../../processed/study2"
figures_dir <- "../../figures/study2"
```

```{r}
results_bayesNMF <- read.csv(file.path(processed_dir, "metrics.csv"))
results_heuristic <- read.csv(file.path(processed_dir, "metrics_heuristic.csv")) %>%
  select(colnames(results_bayesNMF))
results_SA <- read.csv(file.path(processed_dir, "metrics_signatureanalyzer.csv")) %>%
  mutate(total_minutes = seconds/60) %>%
  select(colnames(results_bayesNMF))

results <- rbind(results_bayesNMF, rbind(results_SA, results_heuristic)) %>%
  filter(
    grepl('signatureanalyzer', model) | grepl('SBFI', model) | grepl('BIC', model)
  )

results %>%
  group_by(model) %>%
  tally()
```

## Results

```{r}
results %>%
  mutate(
    rank_bias = learned_rank - N,
    total_minutes = log2(total_minutes)
  ) %>%
  pivot_longer(c(precision, sensitivity, rank_bias, total_minutes), names_to = "metric", values_to = "value") %>%
  mutate(
    metric = factor(metric, levels = c('rank_bias','precision','sensitivity', 'total_minutes'), labels = c('Rank Bias','Precision','Sensitivity', 'log2(Total Minutes)'))
  ) %>%
  ggplot(aes(x = as.factor(N), y = value, color = model)) +
  facet_grid(rows = vars(metric), scales = 'free', switch = 'y') +
  geom_boxplot() +
  labs(
    x = "True Rank",
    color = "Model"
  ) +
  theme(
    text = element_text(size = 20),
    legend.position = "top",
    legend.justification = "left",
    axis.title.y = element_blank(),
    strip.text.y.left = element_text(angle = 0),
    strip.placement = 'outside'
  ) +
  guides(
    color = guide_legend(nrow = 2, byrow = TRUE)
  )
ggsave(file.path(figures_dir, "rank_metrics_aligned.png"), width = 15, height = 13)
```

```{r}
results %>%
  filter(model == "P_T_MH_SBFI") %>%
  mutate(
    rank_bias = learned_rank - N,
    total_minutes = log2(total_minutes)
  ) %>%
  pivot_longer(c(precision, sensitivity, rank_bias, total_minutes), names_to = "metric", values_to = "value") %>%
  mutate(
    metric = factor(metric, levels = c('rank_bias','precision','sensitivity', 'total_minutes'), labels = c('Rank Bias','Precision','Sensitivity', 'log2(Total Minutes)'))
  ) %>%
  ggplot(aes(x = as.factor(N), y = value)) +
  facet_grid(rows = vars(metric), scales = 'free', switch = 'y') +
  geom_boxplot() +
  labs(
    x = "True Rank",
    color = "Model"
  ) +
  theme(
    text = element_text(size = 20),
    legend.position = "top",
    legend.justification = "left",
    axis.title.y = element_blank(),
    strip.text.y.left = element_text(angle = 0),
    strip.placement = 'outside'
  )
ggsave(file.path(figures_dir, "rank_metrics_aligned_P_T_MH_SBFI.png"), width = 15, height = 13)
```

## Greyscale compatable version

```{r}
model_order <- c(
  'P_T_MH_SBFI', 'P_T_MH_BIC','signatureanalyzer_L2',
  'P_E_MH_SBFI', 'P_E_MH_BIC','signatureanalyzer_L1'
)

shapes = list(
  'P_E_MH_SBFI' = 2, # open upright triangle
  'P_T_MH_SBFI' = 17, # filled in upright triangle
  'P_E_MH_BIC' = 0,  # open square
  'P_T_MH_BIC' = 15,  # filled in square
  'signatureanalyzer_L1' = 6, # open upsidedown triangle
  'signatureanalyzer_L2' = 25 # filled in upsidedown triangle
)

colors = list(
  'P_E_MH_SBFI' = "#2196F3",
  'P_T_MH_SBFI' = "#2196F3",
  'P_E_MH_BIC' = "#4CAF50",
  'P_T_MH_BIC' = "#4CAF50",
  'signatureanalyzer_L1' = "#F44336",
  'signatureanalyzer_L2' = "#F44336"
)

fills = list(
  'P_E_MH_SBFI' = "white",
  'P_T_MH_SBFI' = "#2196F3",
  'P_E_MH_BIC' = "white",
  'P_T_MH_BIC' = "#4CAF50",
  'signatureanalyzer_L1' = "white",
  'signatureanalyzer_L2' = "#F44336"
)

plot_dat <- results %>%
  mutate(
    model = factor(model, levels = model_order),
    rank_bias = learned_rank - N,
    prior = ifelse(model %in% c('P_T_MH_SBFI', 'P_T_MH_BIC','signatureanalyzer_L2'), "TN/L2", "E/L1"),
    prior = factor(prior, levels = c("TN/L2", "E/L1")),
    method = case_when(
      grepl('signatureanalyzer', model) ~ "SignatureAnalyzer, ARD",
      grepl('SBFI', model) ~ "bayesNMF, SBFI",
      grepl('BIC', model) ~ "bayesNMF, minBIC",
      TRUE ~ "none"
    ),
    method = factor(method, levels = names(shapes), labels = names(shapes)),
    angle = ifelse(grepl('signatureanalyzer_L2', model), 0, 90)
  ) %>%
  pivot_longer(
    c(precision, sensitivity, rank_bias, total_minutes), 
    names_to = "metric", values_to = "value"
  ) %>%
  mutate(
    metric = factor(metric, levels = c('rank_bias','precision','sensitivity', 'total_minutes'), labels = c('Rank Bias','Precision','Sensitivity', 'Minutes'))
  ) %>%
  arrange(N, prior, method, metric) %>%
  mutate(
    group = interaction(metric, model, N),
    group = factor(group, levels = unique(group))
  )

# plot points of outliers separately so that they are the right shape
outliers_df <- plot_dat %>%
  dplyr::select(group, value) %>%
  group_by(group) %>%
  summarize(
    q1  = quantile(value, 0.25, na.rm = TRUE),
    q3  = quantile(value, 0.75, na.rm = TRUE),
    iqr = q3 - q1,
    lo  = q1 - 1.5 * iqr,
    hi  = q3 + 1.5 * iqr
  ) %>%
  merge(plot_dat, by = "group") %>%
  filter(
    value < lo | value > hi
  ) %>%
  ungroup()

# only plot boxplots if there is more than 1 unique value after removing outliers
boxplot_df <- plot_dat %>%
  dplyr::select(group, value) %>%
  group_by(group) %>%
  summarize(
    q1  = quantile(value, 0.25, na.rm = TRUE),
    q3  = quantile(value, 0.75, na.rm = TRUE),
    iqr = q3 - q1,
    lo  = q1 - 1.5 * iqr,
    hi  = q3 + 1.5 * iqr
  ) %>%
  merge(plot_dat, by = "group") %>%
  filter(value >= lo & value <= hi)  %>%
  # within non-outlier groups, check if there is more than 1 unique value
  dplyr::select(group, value) %>%
  group_by(group) %>%
  summarize(
    count = length(unique(value))
  ) %>%
  merge(plot_dat, by = "group") %>%
  filter(count > 1)
```

```{r}
# extract legend from fig1A
g_legend <- function(a.gplot) {
  # from https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

color_legend = c(
      "bayesNMF SBFI" = "#2196F3",
      "bayesNMF minBIC" = "#4CAF50",
      "SignatureAnalyzer ARD" = "#F44336"
    )

names = list(
  'P_E_MH_SBFI' = "bayesNMF SBFI",
  'P_T_MH_SBFI' = "bayesNMF SBFI",
  'P_E_MH_BIC' = "bayesNMF minBIC",
  'P_T_MH_BIC' = "bayesNMF minBIC",
  'signatureanalyzer_L1' = "SignatureAnalyzer ARD",
  'signatureanalyzer_L2' = "SignatureAnalyzer ARD"
)

legend_plot <- expand.grid(
  method = c("bayesNMF SBFI", "bayesNMF minBIC", "SignatureAnalyzer ARD"),
  prior = c("Truncated Normal / L2", "Exponential / L1")
) %>%
  data.frame() %>%
  mutate(i = 1:n()) %>%
  ggplot(aes(x = i, y = 1, color = method, shape = method, fill = prior)) +
  geom_point() +
  scale_color_manual(
    values = color_legend
  ) +
  scale_shape_manual(
    values = c(
      "bayesNMF SBFI" = 24,
      "bayesNMF minBIC" = 22,
      "SignatureAnalyzer ARD" = 25
    )
  ) +
  scale_fill_manual(
    values = c(
      "Truncated Normal / L2" = "black",
      "Exponential / L1" = "white"
    )
  ) +
  labs(
    color = "Method",
    shape = "Method",
    fill = "Prior"
  ) +
  theme_light() +
  theme(
    legend.justification = "left",
    legend.direction = "horizontal",
    text = element_text(size = 12),
    legend.title = element_text(size = 12)
  ) +
  guides(
    fill = guide_legend(override.aes = list(shape = 21)),
    color = guide_legend()
  )

legend <- g_legend(legend_plot)
ggsave("tmp.png", legend, width = 7, height = 4)
```

```{r}
shapes = list(
  'P_E_MH_SBFI' = 2, # open upright triangle
  'P_T_MH_SBFI' = 17, # filled in upright triangle
  'P_E_MH_BIC' = 0,  # open square
  'P_T_MH_BIC' = 15,  # filled in square
  'signatureanalyzer_L1' = 6, # open upsidedown triangle
  'signatureanalyzer_L2' = 25 # filled in upsidedown triangle
)

pd <- position_dodge2(width = 1, preserve = "single")
greyscale_plot <- function(levels, med_size = 1, legend_height = 0.2, no_x_title = FALSE, no_legend = FALSE) {
  pl <- plot_dat %>% filter(N %in% levels)  %>%
  mutate(
    model = factor(model, levels = model_order),
    method = factor(unlist(names)[as.character(model)], levels = base::names(color_legend)),
    prior = factor(
      ifelse(grepl("(_L2|_T_)", as.character(model)), "Truncated Normal / L2", "Exponential / L1"),
      levels = c("Truncated Normal / L2", "Exponential / L1")
    )
  ) %>%
  ggplot(aes(x = model, y = value, shape = model, color = model, fill = model, group = group)) +
  facet_grid(rows = vars(metric), cols = vars(N),scales = 'free_y', switch = 'both') +
  geom_point(
    data = outliers_df %>% filter(N %in% levels) %>% mutate(model = factor(model, levels = model_order)), 
    position = pd, 
    size = 0.5, alpha = 0.3,
    fill = "white"
  ) +
  geom_boxplot(
    data = boxplot_df %>% filter(N %in% levels) %>% mutate(model = factor(model, levels = model_order)), 
    color = "lightgrey", fill = "white", 
    position = pd, 
    outlier.shape = NA, show.legend = FALSE
  ) +
  stat_summary(
    fun = median, geom = "point", size = med_size, 
    position = pd
  ) +
  labs(
    x = "True Rank",
    fill = "Prior", shape = "Method"
  ) +
  theme_light() +
  theme(
    text = element_text(size = 12),
    legend.position = "top",
    legend.justification = "left",
    legend.text = element_text(size = 9),
    legend.title = element_text(size = 10, face = "bold"),
    legend.key.size = unit(0.4, "lines"),
    strip.placement = 'outside',
    strip.background = element_rect(fill = "white", color = 'grey'),
    strip.text = element_text(color = "black"),
    panel.grid.major = element_line(size = 0.1),
    panel.grid.minor = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.spacing.x = unit(0, "lines"),
    plot.background = element_rect(fill = "white")
  )  +
  scale_shape_manual(
    name = "Method",
    breaks = base::names(shapes),
    values = shapes
  ) +
  scale_color_manual(
    name = "Method",
    breaks = base::names(colors),
    values = colors
  ) +
  scale_fill_manual(
    name = "Prior",
    breaks = names(colors),
    values = colors
  ) +
  guides(
    shape = guide_legend(order = 1),
    color = guide_legend(order = 1),
    fill = guide_legend(order = 2, override.aes = list(shape = 21, color = "grey30"))
  ) +
  scale_x_discrete(expand = expansion(add = 1)) +
  ggh4x::facetted_pos_scales(
    y = list(NULL, scale_y_continuous(limits = c(0, 1.05)), scale_y_continuous(limits = c(0, 1.05)), scale_y_continuous(trans = "log2"))
  )
  if (no_x_title) {
    pl <- pl + theme(axis.title.x = element_blank())
  }

  # add external legend
  if (!no_legend) {
    pl <- gridExtra::arrangeGrob(
      pl + theme(legend.position = "none"),
      legend,
      nrow = 2,
      heights = c(1, legend_height)
    )
  } else {
    pl <- pl + theme(legend.position = "none")
  }
  return(pl)
}
```

```{r}
pl <- greyscale_plot(1:20)
ggsave(file.path(figures_dir, "rank_metrics_aligned_greyscale_1_20.png"), pl, width = 14, height = 5)

pl <- greyscale_plot(1:10, no_x_title = TRUE)
ggsave(file.path(figures_dir, "rank_metrics_aligned_greyscale_1_10.png"), pl, width = 7, height = 5)

pl <- greyscale_plot(11:20, no_legend = TRUE)
ggsave(file.path(figures_dir, "rank_metrics_aligned_greyscale_11_20.png"), pl, width = 7, height = 3.7) # shorter with no legend

pl <- greyscale_plot(c(1,5,10,15,20), med_size = 1.2)
ggsave(file.path(figures_dir, "rank_metrics_aligned_greyscale_5s.png"), pl, width = 7, height = 6)
```

## Figure: label switching diagnostic

```{r eval = FALSE}
samplers <- list()
for (N in c(5, 10, 15, 20)) {
  print(N)
  sampler <- readRDS(file.path(output_dir, "P_T_MH_SBFI", glue("N{N}_G64_rep1_withsamples"), "sampler.rds"))
  plot(sampler, sigs = TRUE)
}
```

```{r}
plots <- list()
for (N in c(5, 10, 15)) {
  print(N)
  sampler <- readRDS(file.path(output_dir, "P_T_MH_SBFI", glue("N{N}_G64_rep1_withsamples"), "sampler.rds"))
  plots[[as.character(N)]] <- sampler$reference_comparison$plots$label_switching
}
```

```{r}
# add titles A, B, C with gridExtra
plots_combined <- gridExtra::arrangeGrob(
  ggplot() + theme_void() + labs(title = glue("A. Label Switching, True N = 5")) + theme(plot.title = element_text(size = 30)),
  plots[[1]],
  ggplot() + theme_void() + labs(title = glue("B. Label Switching, True N = 10")) + theme(plot.title = element_text(size = 30)),
  plots[[2]],
  ggplot() + theme_void() + labs(title = glue("C. Label Switching, True N = 15")) + theme(plot.title = element_text(size = 30)),
  plots[[3]],
  ncol = 1,
  heights = c(0.1, 1, 0.1, 1, 0.1, 1)
)
ggsave(file.path(figures_dir, "label_switching_combined.png"), plots_combined, width = 20, height = 25)
```
